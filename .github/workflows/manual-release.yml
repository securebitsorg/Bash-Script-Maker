name: Manual Release


on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      release_notes:
        description: 'Release notes'
        required: false
        type: string
      create_release:
        description: 'Create GitHub release'
        required: false
        default: true
        type: boolean

jobs:
  create-release:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install python-semantic-release

    - name: Get current version
      id: current_version
      run: |
        echo "current_version=$(cat VERSION)" >> $GITHUB_OUTPUT

    - name: Calculate new version
      id: new_version
      run: |
        current="${{ steps.current_version.outputs.current_version }}"
        version_type="${{ inputs.version_type }}"

        IFS='.' read -ra VERSION_PARTS <<< "$current"
        major=${VERSION_PARTS[0]}
        minor=${VERSION_PARTS[1]}
        patch=${VERSION_PARTS[2]}

        case $version_type in
          patch)
            patch=$((patch + 1))
            ;;
          minor)
            minor=$((minor + 1))
            patch=0
            ;;
          major)
            major=$((major + 1))
            minor=0
            patch=0
            ;;
        esac

        new_version="$major.$minor.$patch"
        echo "new_version=$new_version" >> $GITHUB_OUTPUT
        echo "New version: $new_version"

    - name: Update VERSION file
      run: |
        echo "${{ steps.new_version.outputs.new_version }}" > VERSION

    - name: Create git tag
      run: |
        git config --global user.name "github-actions"
    - name: Push changes and tags
      run: |
        git push origin main
        git push origin "v${{ steps.new_version.outputs.new_version }}"

    - name: Create GitHub Release
      if: ${{ inputs.create_release }}
      uses: actions/create-release@v1.2.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "v${{ steps.new_version.outputs.new_version }}"
        release_name: "Release ${{ steps.new_version.outputs.new_version }}"
        body: |
          ## What's Changed

          ${{ inputs.release_notes || 'Automated release' }}

          ### Version Information
          - **Version**: ${{ steps.new_version.outputs.new_version }}
          - **Previous Version**: ${{ steps.current_version.outputs.current_version }}
          - **Version Type**: ${{ inputs.version_type }}

          ### Installation
          ```bash
          pip install bash-script-maker==${{ steps.new_version.outputs.new_version }}
          ```

          ### Downloads
          - Source code: [ZIP](https://github.com/${{ github.repository }}/archive/v${{ steps.new_version.outputs.new_version }}.zip)
          - Tarball: [TAR.GZ](https://github.com/${{ github.repository }}/archive/v${{ steps.new_version.outputs.new_version }}.tar.gz)
        draft: false
        prerelease: false
# Finish