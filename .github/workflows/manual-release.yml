name: Manual Release


on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      release_notes:
        description: 'Release notes'
        required: false
        type: string
      create_release:
        description: 'Create GitHub release'
        required: false
        default: true
        type: boolean

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"

    - name: Get current version
      id: current_version
      run: |
        echo "current_version=$(cat VERSION)" >> $GITHUB_OUTPUT

    - name: Calculate new version
      id: new_version
      run: |
        current="${{ steps.current_version.outputs.current_version }}"
        version_type="${{ inputs.version_type }}"

        IFS='.' read -ra VERSION_PARTS <<< "$current"
        major=${VERSION_PARTS[0]}
        minor=${VERSION_PARTS[1]}
        patch=${VERSION_PARTS[2]}

        case $version_type in
          patch)
            patch=$((patch + 1))
            ;;
          minor)
            minor=$((minor + 1))
            patch=0
            ;;
          major)
            major=$((major + 1))
            minor=0
            patch=0
            ;;
        esac

        new_version="$major.$minor.$patch"
        echo "new_version=$new_version" >> $GITHUB_OUTPUT
        echo "New version: $new_version"

    - name: Update VERSION file
      run: |
        echo "${{ steps.new_version.outputs.new_version }}" > VERSION

    - name: Update pyproject.toml version
      run: |
        new_ver="${{ steps.new_version.outputs.new_version }}"
        sed -i -E "s/^version\s*=\s*\"[^\"]+\"/version = \"${new_ver}\"/" pyproject.toml

    - name: Set git identity
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: Commit version bump
      run: |
        git add VERSION pyproject.toml
        git commit -m "chore(release): v${{ steps.new_version.outputs.new_version }} (manual)"

    - name: Create annotated tag
      run: |
        git tag -a "v${{ steps.new_version.outputs.new_version }}" -m "chore(release): v${{ steps.new_version.outputs.new_version }} (manual)"

    - name: Push changes and tags
      run: |
        git push origin main --follow-tags

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build

    - name: Build package
      run: |
        python -m build

    - name: Create GitHub Release
      if: ${{ inputs.create_release }}
      run: |
        NOTES_FILE="release-notes.txt"
        echo "## What's Changed" > "$NOTES_FILE"
        echo "" >> "$NOTES_FILE"
        if [ -n "${{ inputs.release_notes }}" ]; then
          echo "${{ inputs.release_notes }}" >> "$NOTES_FILE"
          echo "" >> "$NOTES_FILE"
        else
          echo "Automated manual release" >> "$NOTES_FILE"
          echo "" >> "$NOTES_FILE"
        fi
        echo "### Version Information" >> "$NOTES_FILE"
        echo "- Version: ${{ steps.new_version.outputs.new_version }}" >> "$NOTES_FILE"
        echo "- Previous Version: ${{ steps.current_version.outputs.current_version }}" >> "$NOTES_FILE"
        echo "- Version Type: ${{ inputs.version_type }}" >> "$NOTES_FILE"
        echo "" >> "$NOTES_FILE"
        echo "### Installation" >> "$NOTES_FILE"
        echo '\`\`\`bash' >> "$NOTES_FILE"
        echo "pip install bash-script-maker==${{ steps.new_version.outputs.new_version }}" >> "$NOTES_FILE"
        echo '\`\`\`' >> "$NOTES_FILE"
        echo "" >> "$NOTES_FILE"
        gh release create "v${{ steps.new_version.outputs.new_version }}" \
          --title "Release ${{ steps.new_version.outputs.new_version }}" \
          --notes-file "$NOTES_FILE" \
          --draft=false \
          --prerelease=false \
          dist/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
# Finish