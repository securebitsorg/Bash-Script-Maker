name: CI/CD Pipeline


on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [published]

permissions:
  contents: read

env:
  PYTHON_VERSION: "3.9"

jobs:
  # Test-Job für verschiedene Python-Versionen
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk python3-pip zenity xterm

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black mypy

    - name: Lint with flake8
      run: |
        flake8 bash_script_maker.py syntax_highlighter.py --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 bash_script_maker.py syntax_highlighter.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type check with mypy
      run: |
        mypy bash_script_maker.py syntax_highlighter.py --ignore-missing-imports --no-error-summary --disable-error-code=import

    - name: Format check with black
      run: |
        black --check --diff bash_script_maker.py syntax_highlighter.py

    - name: Test with pytest
      run: |
        python -c "import bash_script_maker; import syntax_highlighter; print('Import test passed')"
        python -c "import tkinter; print('Tkinter available')"
        python -c "from bash_script_maker import BashScriptMaker; print('BashScriptMaker class available')"
        python -c "from syntax_highlighter import BashScriptEditor; print('BashScriptEditor class available')"

    - name: Generate coverage report
      run: |
        python -m pytest tests/ --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
    
  # Purge-Cache-Job
  purge-caches:
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
      - name: Delete Actions cache for this ref
        run: |
          curl -fsSL -X DELETE \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/caches?ref=${{ github.ref }}"

  # Build-Job für Package-Erstellung
  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel setuptools

    - name: Build package
      run: python -m build

    - name: Check package
      run: |
        python -m twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package
        path: dist/
        retention-days: 30

  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release' && github.event.action == 'published'
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package
        path: dist/

    - name: Publish to PyPI
      if: github.repository_owner == 'securebitsorg' && github.event_name == 'release' && github.event.action == 'published'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        python -m twine upload dist/*


  # Documentation-Job
  docs:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pdoc3 -r requirements.txt

    - name: Generate documentation
      run: |
        mkdir -p docs
        pdoc3 --html --output-dir docs bash_script_maker syntax_highlighter

    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/
        retention-days: 30

  # Docker-Image erstellen (optional)
  docker:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Generate lowercase repository name for Docker tag
      id: repo
      run: echo "name=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ steps.repo.outputs.name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=ref,event=tag
          # Immer 'latest' Tag für den Default-Branch
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Security-Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Run Bandit security linter
      run: |
        python -m pip install --upgrade pip
        pip install bandit
        bandit -r . -f json -o bandit-results.json || echo "Bandit completed with warnings"

    - name: Upload bandit results
      uses: actions/upload-artifact@v4
      with:
        name: bandit-results
        path: bandit-results.json

    - name: Run Safety check
      run: |
        python -m pip install --upgrade pip
        pip install "typer<0.10.0"  # Kompatibilitäts-Fix
        pip install "safety==2.3.5"
        safety check --file requirements.txt --full-report

  # Automatisches Versionierung und Release-Erstellung
  version-and-release:
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
      pull-requests: write
      issues: write
      repository-projects: write
      packages: write
      actions: write
    env:
      HAS_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN != '' }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install semantic-release
      run: |
        python -m pip install --upgrade pip
        pip install python-semantic-release

    - name: Debug Git History
      run: |
        echo "=== Git Tags ==="
        git tag --list
        echo "=== Recent Commits ==="
        git log --oneline -10
        echo "=== Commits since v1.1.0 ==="
        git log --oneline v1.1.0..HEAD || echo "No commits since v1.1.0 found"

    - name: Ensure baseline tag exists when missing
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -e
        git fetch --tags --force
        # Set committer identity for creating tags
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        EXISTING_TAGS=$(git tag -l 'v*' | wc -l)
        if [ "$EXISTING_TAGS" -eq 0 ]; then
          echo "No tags found. Creating baseline tag from VERSION file."
          BASELINE_VERSION=$(cat VERSION | tr -d '\n\r')
          if [ -z "$BASELINE_VERSION" ]; then
            echo "VERSION file empty or missing" && exit 1
          fi
          BASELINE_TAG="v${BASELINE_VERSION}"
          # Falls Tag lokal bereits existiert, nicht neu erstellen
          if git rev-parse -q --verify "refs/tags/$BASELINE_TAG" >/dev/null; then
            echo "Baseline tag $BASELINE_TAG already exists locally; skipping creation"
          else
            # Prüfe, ob Tag bereits auf Remote existiert
            if git ls-remote --exit-code --tags origin "$BASELINE_TAG" >/dev/null 2>&1; then
              echo "Baseline tag $BASELINE_TAG exists on remote; syncing local tags and skipping creation"
              git fetch --tags --force
            else
              echo "Creating baseline tag ${BASELINE_TAG} at HEAD"
              git tag -a "$BASELINE_TAG" -m "chore(release): baseline $BASELINE_TAG"
              git push origin "$BASELINE_TAG"
            fi
          fi
        else
          echo "Found existing tags; skipping baseline creation"
        fi

    - name: Semantic Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        echo "=== Semantic Release Debug ==="
        semantic-release --noop publish || echo "semantic-release noop exited non-zero; continuing"
        echo "=== Actual Release ==="
        semantic-release publish
        
    - name: Download build artifacts for release (Fallback)
      if: success()
      uses: actions/download-artifact@v4
      with:
        name: python-package
        path: dist/

    - name: Install Twine for PyPI upload
      if: success() && env.HAS_PYPI_TOKEN == 'true'
      run: |
        python -m pip install --upgrade pip
        pip install twine

    - name: Publish to PyPI
      if: success() && env.HAS_PYPI_TOKEN == 'true'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        python -m twine upload --repository-url https://upload.pypi.org/legacy/ dist/*

    - name: Create GitHub Release (Fallback)
      if: success()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Prüfe ob ein neuer Tag erstellt wurde
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -n "$LATEST_TAG" ] && [ "$LATEST_TAG" != "v1.1.0" ]; then
          echo "Creating GitHub Release for $LATEST_TAG"
          # Falls es Artefakte gibt, anhängen; ansonsten nur Release erstellen
          if compgen -G "dist/*" > /dev/null; then
            gh release create "$LATEST_TAG" \
              --title "$LATEST_TAG" \
              --notes "Automatisches Release erstellt durch semantic-release" \
              --generate-notes \
              dist/* || echo "Release creation failed or already exists"
          else
            gh release create "$LATEST_TAG" \
              --title "$LATEST_TAG" \
              --notes "Automatisches Release erstellt durch semantic-release" \
              --generate-notes || echo "Release creation failed or already exists"
          fi
        else
          echo "No new tag found, skipping GitHub Release creation"
        fi

# Finish